import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { User } from 'src/user/schemas/user.schema/user.schema';
import { CreateProjectDto } from './dto/create-project.dto';
import { FileService } from 'src/file/file.service'; // Inject the File Service to copy template
import { join } from 'path';

@Injectable()
export class ProjectService {
  constructor(
    @InjectModel(User.name) private userModel: Model<User>,
    private readonly fileService: FileService,
  ) {}

  // Create a new project and copy the React template
  async createProject(userId: string, createProjectDto: CreateProjectDto): Promise<any> {
    const user = await this.userModel.findById(userId);
    if (!user) {
      throw new NotFoundException('User not found');
    }

    const projectName = createProjectDto.name.replace(/\s+/g, '-').toLowerCase();
    const projectDir = join(__dirname, '..', '..', 'projects', projectName);

    // Add project to the user
    const newProject = user.projects.create({
      ...createProjectDto,
      name: projectName,
    });
    user.projects.push(newProject);
    await user.save();

    // Copy the template to the new project folder
    await this.fileService.copyTemplateToProject(projectDir);

    return newProject;
  }

  // List all projects for a user
  async listProjects(userId: string): Promise<any[]> {
    const user = await this.userModel.findById(userId);
    if (!user) {
      throw new NotFoundException('User not found');
    }
    return user.projects;
  }

  // Delete a specific project
  async deleteProject(userId: string, projectId: string): Promise<void> {
    const user = await this.userModel.findById(userId);
    if (!user) {
      throw new NotFoundException('User not found');
    }

    const project = user.projects.id(projectId);
    if (!project) {
      throw new NotFoundException('Project not found');
    }

    // Remove the project from the user's projects list
    user.projects.pull(projectId);
    await user.save();
  }
}
